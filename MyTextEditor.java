/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Business;

import GUI.TextEditor;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.io.File;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.Document;
import javax.swing.undo.UndoManager;

/**
 *
 * @author ken
 */
public class MyTextEditor extends javax.swing.JFrame {

    TextEditor textEditor;
    JFileChooser fc;
    String fileName;
    UndoManager undoManager;
    int pos = 0;
    Document document;

    public MyTextEditor() {
        textEditor = new TextEditor();
        initComponents();
        fc = new JFileChooser();
        FileFilter txtFilter = new FileNameExtensionFilter("Text Document(*.txt)", "txt");
        fc.setFileFilter(txtFilter);
        txtDisplay.setFont(new Font("Consolas", Font.PLAIN, 14));
        undoManager = new UndoManager();
        documentListener();
        initFontGUI();
        txtDisplay.getInputMap().put(KeyStroke.getKeyStroke("ctrl H"), "none");
        menuEditCopy.setEnabled(false);
        menuEditCut.setEnabled(false);
        menuEditFind.setEnabled(false);
        menuEditReplace.setEnabled(false);
        btnFindNext.setEnabled(false);
        btnReplace.setEnabled(false);
        btnReplaceAll.setEnabled(false);
        menuEditUndo.setEnabled(false);
        menuEditRedo.setEnabled(false);
        fc.setCurrentDirectory(new File((System.getProperty("user.home") + System.getProperty("file.separator") + "Desktop")));
    }

    /**
     * Creates new form MyTextEditorGUI
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        changeFontDialog = new javax.swing.JDialog();
        panelChangeFont = new javax.swing.JPanel();
        lblFont = new javax.swing.JLabel();
        lblFontStyle = new javax.swing.JLabel();
        lblSize = new javax.swing.JLabel();
        txtfFont = new javax.swing.JTextField();
        txtfFontStyle = new javax.swing.JTextField();
        txtfSize = new javax.swing.JTextField();
        scpFont = new javax.swing.JScrollPane();
        fontList = new javax.swing.JList<>();
        scpFontStyle = new javax.swing.JScrollPane();
        fontStyleList = new javax.swing.JList<>();
        scpSize = new javax.swing.JScrollPane();
        sizeList = new javax.swing.JList<>();
        lblPreview = new javax.swing.JLabel();
        btnCancelCFont = new javax.swing.JButton();
        btnOK = new javax.swing.JButton();
        findDialog = new javax.swing.JDialog();
        panelFindDialog = new javax.swing.JPanel();
        lblFindDialog = new javax.swing.JLabel();
        txtfFind = new javax.swing.JTextField();
        btnFindDialog = new javax.swing.JButton();
        btnCancelFind = new javax.swing.JButton();
        chbMatchCase = new javax.swing.JCheckBox();
        replaceDialog = new javax.swing.JDialog();
        panelReplace = new javax.swing.JPanel();
        lblFindWhat = new javax.swing.JLabel();
        lblReplaceWith = new javax.swing.JLabel();
        txtfFindWhat = new javax.swing.JTextField();
        txtfReplaceWith = new javax.swing.JTextField();
        btnFindNext = new javax.swing.JButton();
        btnReplace = new javax.swing.JButton();
        btnReplaceAll = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        chbMatchCase2 = new javax.swing.JCheckBox();
        scrollPane = new javax.swing.JScrollPane();
        txtDisplay = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuFileNew = new javax.swing.JMenuItem();
        menuFileOpen = new javax.swing.JMenuItem();
        menuFileSave = new javax.swing.JMenuItem();
        menuFileSaveAs = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        menuFileExit = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();
        menuEditSelectAll = new javax.swing.JMenuItem();
        menuEditCopy = new javax.swing.JMenuItem();
        menuEditCut = new javax.swing.JMenuItem();
        menuEditPaste = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuEditUndo = new javax.swing.JMenuItem();
        menuEditRedo = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        menuEditFind = new javax.swing.JMenuItem();
        menuEditReplace = new javax.swing.JMenuItem();
        menuEditChangeFont = new javax.swing.JMenuItem();

        changeFontDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        changeFontDialog.setTitle("Font");
        changeFontDialog.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        changeFontDialog.setResizable(false);
        changeFontDialog.setSize(new java.awt.Dimension(370, 374));

        lblFont.setText("Font:");

        lblFontStyle.setText("Font style: ");

        lblSize.setText("Size:");

        txtfFont.setEditable(false);

        txtfFontStyle.setEditable(false);

        txtfSize.setEditable(false);

        scpFont.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        fontList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                fontListValueChanged(evt);
            }
        });
        scpFont.setViewportView(fontList);

        fontStyleList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Plain", "Bold", "Italic", "Bold Italic" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        fontStyleList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                fontListValueChanged(evt);
            }
        });
        scpFontStyle.setViewportView(fontStyleList);

        sizeList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "3", "5", "8", "10", "11", "12", "13", "14", "16", "18", "24", "36", "48" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        sizeList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        sizeList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                fontListValueChanged(evt);
            }
        });
        scpSize.setViewportView(sizeList);

        lblPreview.setText("This quick brown fox jumps over the lazy dog");
        lblPreview.setBorder(javax.swing.BorderFactory.createTitledBorder("Preview"));

        btnCancelCFont.setText("cancel");
        btnCancelCFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelCFontActionPerformed(evt);
            }
        });

        btnOK.setText("ok");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelChangeFontLayout = new javax.swing.GroupLayout(panelChangeFont);
        panelChangeFont.setLayout(panelChangeFontLayout);
        panelChangeFontLayout.setHorizontalGroup(
            panelChangeFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelChangeFontLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelChangeFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPreview, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelChangeFontLayout.createSequentialGroup()
                        .addGroup(panelChangeFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelChangeFontLayout.createSequentialGroup()
                                .addGroup(panelChangeFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblFont)
                                    .addComponent(txtfFont)
                                    .addComponent(scpFont, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(panelChangeFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(scpFontStyle)
                                    .addGroup(panelChangeFontLayout.createSequentialGroup()
                                        .addGap(4, 4, 4)
                                        .addComponent(lblFontStyle))
                                    .addComponent(txtfFontStyle))
                                .addGap(18, 18, 18)
                                .addGroup(panelChangeFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(scpSize, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblSize)
                                    .addComponent(txtfSize, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(panelChangeFontLayout.createSequentialGroup()
                                .addGap(213, 213, 213)
                                .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnCancelCFont)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        panelChangeFontLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnCancelCFont, btnOK});

        panelChangeFontLayout.setVerticalGroup(
            panelChangeFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelChangeFontLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(panelChangeFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFont)
                    .addComponent(lblFontStyle)
                    .addComponent(lblSize))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelChangeFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtfFont, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtfFontStyle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtfSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelChangeFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(scpFontStyle, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                    .addComponent(scpFont, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(scpSize, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(29, 29, 29)
                .addComponent(lblPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(panelChangeFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelCFont)
                    .addComponent(btnOK))
                .addGap(22, 22, 22))
        );

        javax.swing.GroupLayout changeFontDialogLayout = new javax.swing.GroupLayout(changeFontDialog.getContentPane());
        changeFontDialog.getContentPane().setLayout(changeFontDialogLayout);
        changeFontDialogLayout.setHorizontalGroup(
            changeFontDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelChangeFont, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        changeFontDialogLayout.setVerticalGroup(
            changeFontDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelChangeFont, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        findDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        findDialog.setTitle("Find");
        findDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                findDialogWindowClosing(evt);
            }
        });

        panelFindDialog.setToolTipText("");

        lblFindDialog.setText("Find what:");

        btnFindDialog.setText("Find next");
        btnFindDialog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindDialogActionPerformed(evt);
            }
        });

        btnCancelFind.setText("Cancel");
        btnCancelFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelFindActionPerformed(evt);
            }
        });

        chbMatchCase.setText("Match case");
        chbMatchCase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chbMatchCaseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelFindDialogLayout = new javax.swing.GroupLayout(panelFindDialog);
        panelFindDialog.setLayout(panelFindDialogLayout);
        panelFindDialogLayout.setHorizontalGroup(
            panelFindDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelFindDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelFindDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelFindDialogLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(lblFindDialog)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtfFind, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(chbMatchCase))
                .addGap(18, 18, 18)
                .addGroup(panelFindDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCancelFind, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                    .addComponent(btnFindDialog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18))
        );
        panelFindDialogLayout.setVerticalGroup(
            panelFindDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFindDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelFindDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFindDialog)
                    .addComponent(txtfFind, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFindDialog))
                .addGap(18, 18, 18)
                .addGroup(panelFindDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelFind)
                    .addComponent(chbMatchCase))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout findDialogLayout = new javax.swing.GroupLayout(findDialog.getContentPane());
        findDialog.getContentPane().setLayout(findDialogLayout);
        findDialogLayout.setHorizontalGroup(
            findDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelFindDialog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        findDialogLayout.setVerticalGroup(
            findDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(findDialogLayout.createSequentialGroup()
                .addComponent(panelFindDialog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        replaceDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        replaceDialog.setTitle("Replace");
        replaceDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                replaceDialogWindowClosing(evt);
            }
        });

        lblFindWhat.setText("Find what:");

        lblReplaceWith.setText("Replace with:");

        btnFindNext.setText("Find next");
        btnFindNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindNextActionPerformed(evt);
            }
        });

        btnReplace.setText("Replace");
        btnReplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReplaceActionPerformed(evt);
            }
        });

        btnReplaceAll.setText("Replace all");
        btnReplaceAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReplaceAllActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        chbMatchCase2.setText("Match Case");
        chbMatchCase2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chbMatchCase2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelReplaceLayout = new javax.swing.GroupLayout(panelReplace);
        panelReplace.setLayout(panelReplaceLayout);
        panelReplaceLayout.setHorizontalGroup(
            panelReplaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelReplaceLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(panelReplaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelReplaceLayout.createSequentialGroup()
                        .addGroup(panelReplaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(panelReplaceLayout.createSequentialGroup()
                                .addComponent(lblFindWhat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtfFindWhat, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelReplaceLayout.createSequentialGroup()
                                .addComponent(lblReplaceWith, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtfReplaceWith, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(20, 20, 20))
                    .addGroup(panelReplaceLayout.createSequentialGroup()
                        .addComponent(chbMatchCase2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(panelReplaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnFindNext, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnReplace, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnReplaceAll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        panelReplaceLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtfFindWhat, txtfReplaceWith});

        panelReplaceLayout.setVerticalGroup(
            panelReplaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelReplaceLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnFindNext)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnReplace)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnReplaceAll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelReplaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(chbMatchCase2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(panelReplaceLayout.createSequentialGroup()
                .addGroup(panelReplaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelReplaceLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(txtfFindWhat))
                    .addGroup(panelReplaceLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(lblFindWhat)))
                .addGap(18, 18, 18)
                .addGroup(panelReplaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblReplaceWith)
                    .addComponent(txtfReplaceWith))
                .addGap(71, 71, 71))
        );

        javax.swing.GroupLayout replaceDialogLayout = new javax.swing.GroupLayout(replaceDialog.getContentPane());
        replaceDialog.getContentPane().setLayout(replaceDialogLayout);
        replaceDialogLayout.setHorizontalGroup(
            replaceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelReplace, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        replaceDialogLayout.setVerticalGroup(
            replaceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelReplace, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Untitled");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        txtDisplay.setColumns(20);
        txtDisplay.setLineWrap(true);
        txtDisplay.setRows(5);
        txtDisplay.setWrapStyleWord(true);
        scrollPane.setViewportView(txtDisplay);

        menuFile.setText("File");

        menuFileNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        menuFileNew.setText("New");
        menuFileNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFileNewActionPerformed(evt);
            }
        });
        menuFile.add(menuFileNew);

        menuFileOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        menuFileOpen.setText("Open...");
        menuFileOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFileOpenActionPerformed(evt);
            }
        });
        menuFile.add(menuFileOpen);

        menuFileSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuFileSave.setText("Save");
        menuFileSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFileSaveActionPerformed(evt);
            }
        });
        menuFile.add(menuFileSave);

        menuFileSaveAs.setText("Save As...");
        menuFileSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFileSaveAsActionPerformed(evt);
            }
        });
        menuFile.add(menuFileSaveAs);
        menuFile.add(jSeparator3);

        menuFileExit.setText("Exit");
        menuFileExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFileExitActionPerformed(evt);
            }
        });
        menuFile.add(menuFileExit);

        menuBar.add(menuFile);

        menuEdit.setText("Edit");

        menuEditSelectAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        menuEditSelectAll.setText("Select All");
        menuEditSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditSelectAllActionPerformed(evt);
            }
        });
        menuEdit.add(menuEditSelectAll);

        menuEditCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        menuEditCopy.setText("Copy");
        menuEditCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditCopyActionPerformed(evt);
            }
        });
        menuEdit.add(menuEditCopy);

        menuEditCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        menuEditCut.setText("Cut");
        menuEditCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditCutActionPerformed(evt);
            }
        });
        menuEdit.add(menuEditCut);

        menuEditPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        menuEditPaste.setText("Paste");
        menuEditPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditPasteActionPerformed(evt);
            }
        });
        menuEdit.add(menuEditPaste);
        menuEdit.add(jSeparator1);

        menuEditUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        menuEditUndo.setText("Undo");
        menuEditUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditUndoActionPerformed(evt);
            }
        });
        menuEdit.add(menuEditUndo);

        menuEditRedo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        menuEditRedo.setText("Redo");
        menuEditRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditRedoActionPerformed(evt);
            }
        });
        menuEdit.add(menuEditRedo);
        menuEdit.add(jSeparator2);

        menuEditFind.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        menuEditFind.setText("Find");
        menuEditFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditFindActionPerformed(evt);
            }
        });
        menuEdit.add(menuEditFind);

        menuEditReplace.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        menuEditReplace.setText("Replace");
        menuEditReplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditReplaceActionPerformed(evt);
            }
        });
        menuEdit.add(menuEditReplace);

        menuEditChangeFont.setText("Change Font");
        menuEditChangeFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditChangeFontActionPerformed(evt);
            }
        });
        menuEdit.add(menuEditChangeFont);

        menuBar.add(menuEdit);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 618, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void initFontGUI() {
        // get all font 
        GraphicsEnvironment gEnv = GraphicsEnvironment.getLocalGraphicsEnvironment();
        String[] envfonts = gEnv.getAvailableFontFamilyNames();
        // load to list font all available font family name
        DefaultListModel<String> listModel = new DefaultListModel<>();
        for (String envfont : envfonts) {
            listModel.addElement(envfont);
        }
        fontList.setModel(listModel);
        //set default font 
        sizeList.setSelectedValue("14", true);
        fontStyleList.setSelectedIndex(0);
        fontList.setSelectedValue("Consolas", true);

    }

    private void documentListener() {
        document = txtDisplay.getDocument();
        // listener undo/ redo manager jtextarea
        document.addUndoableEditListener(new UndoableEditListener() {
            @Override
            public void undoableEditHappened(UndoableEditEvent e) {
                undoManager.addEdit(e.getEdit());
            }
        });
        // listener text change at text area
        document.addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent de) {
                updateItemState();
            }

            @Override
            public void removeUpdate(DocumentEvent de) {
                updateItemState();
                if (fileName != null) {
                    textEditor.setTextChanged(true);
                }
            }

            @Override
            public void changedUpdate(DocumentEvent de) {
                // nothing
            }

            private void updateItemState() {
                textEditor.setData(txtDisplay.getText());
                if (undoManager.canRedo()) {
                    menuEditRedo.setEnabled(true);
                } else {
                    menuEditRedo.setEnabled(false);
                }

                if (undoManager.canUndo()) {
                    menuEditUndo.setEnabled(true);
                } else {
                    menuEditUndo.setEnabled(false);
                }
                if ("".equals(txtDisplay.getText()) || txtDisplay.getText() == null) {
                    menuEditCopy.setEnabled(false);
                    menuEditCut.setEnabled(false);
                    menuEditFind.setEnabled(false);
                    menuEditReplace.setEnabled(false);
                    textEditor.setTextChanged(false);
                } else {
                    menuEditCopy.setEnabled(true);
                    menuEditCut.setEnabled(true);
                    menuEditFind.setEnabled(true);
                    menuEditReplace.setEnabled(true);
                    textEditor.setTextChanged(true);
                }
            }
        });

        // listener find what text field in replace dialog change 
        txtfFindWhat.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent de) {
                updateState();
            }

            @Override
            public void removeUpdate(DocumentEvent de) {
                updateState();
            }

            @Override
            public void changedUpdate(DocumentEvent de) {
                updateState();
            }

            private void updateState() {
                if (txtfFindWhat.getText().equals("") || txtfFindWhat.getText() == null) {
                    btnFindNext.setEnabled(false);
                    btnReplace.setEnabled(false);
                    btnReplaceAll.setEnabled(false);
                } else {
                    btnFindNext.setEnabled(true);
                    btnReplace.setEnabled(true);
                    btnReplaceAll.setEnabled(true);
                }
            }
        });
    }

    private void menuFileNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFileNewActionPerformed
        // TODO add your handling code here:
        if (textEditor.isTextChanged()) {
            int result = JOptionPane.showConfirmDialog(this, "Do you want save change to " + this.getTitle(), "My text editor", JOptionPane.YES_NO_OPTION);
            if (textEditor.newFile(result)) {
                this.menuFileSaveActionPerformed(evt);
            }
        }
        txtDisplay.setText("");
        fileName = null;
        this.setTitle("Untitled");
        menuEditUndo.setEnabled(false);
        menuEditRedo.setEnabled(false);
    }//GEN-LAST:event_menuFileNewActionPerformed

    private void openGui() {
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            fileName = fc.getSelectedFile().getAbsolutePath();
            txtDisplay.setText(textEditor.openFile(fileName));
            txtDisplay.requestFocus();
            //set cursor to the top
            txtDisplay.setCaretPosition(0);
            this.setTitle(fileName);
            textEditor.setTextChanged(false);
            menuEditUndo.setEnabled(false);
            menuEditRedo.setEnabled(false);
        }
    }

    private void menuFileOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFileOpenActionPerformed
        // TODO add your handling code here:
        //fix loi open new file when dang lam tren file cu
        if (textEditor.isTextChanged()) {
            int result = JOptionPane.showConfirmDialog(this, "Do you want save change to " + this.getTitle(), "My text editor", JOptionPane.YES_NO_CANCEL_OPTION);
            if (result == 0) {
                saveGUI();
                openGui();
            } else if (result == 1) {
                openGui();
            }
        } else {
            openGui();
        }
    }//GEN-LAST:event_menuFileOpenActionPerformed

    private void saveGUI() {
        if (fileName == null) {
            if (fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                fileName = fc.getSelectedFile().getAbsolutePath();
                textEditor.save(fileName);
                textEditor.setTextChanged(false);
                this.setTitle(fileName);
            }
        } else {
            textEditor.save(fileName);
            textEditor.setTextChanged(false);
        }
    }

    private void menuFileSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFileSaveActionPerformed
        // TODO add your handling code here:
        this.saveGUI();
    }//GEN-LAST:event_menuFileSaveActionPerformed

    private void menuFileSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFileSaveAsActionPerformed
        // TODO add your handling code here:
        if (fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            fileName = fc.getSelectedFile().getAbsolutePath();
            textEditor.save(fileName);
        }
        this.setTitle(fileName);
        textEditor.setTextChanged(false);

    }//GEN-LAST:event_menuFileSaveAsActionPerformed

    private void exitGui() {
        if (textEditor.isTextChanged()) {
            int result = JOptionPane.showConfirmDialog(this, "Do you want save change to " + this.getTitle(), "My text editor", JOptionPane.YES_NO_CANCEL_OPTION);
            if (result == 0) {
                saveGUI();
                this.dispose();
                System.exit(NORMAL);
            } else if (result == 1) {
                this.dispose();
                System.exit(NORMAL);
            }
        } else {
            this.dispose();
            System.exit(NORMAL);
        }
    }
    private void menuFileExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFileExitActionPerformed
        // TODO add your handling code here:
        this.exitGui();
    }//GEN-LAST:event_menuFileExitActionPerformed

    private void menuEditSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditSelectAllActionPerformed
        // TODO add your handling code here:
        txtDisplay.selectAll();
    }//GEN-LAST:event_menuEditSelectAllActionPerformed

    private void menuEditCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditCopyActionPerformed
        // TODO add your handling code here:
        txtDisplay.copy();
    }//GEN-LAST:event_menuEditCopyActionPerformed

    private void menuEditCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditCutActionPerformed
        // TODO add your handling code here:
        txtDisplay.cut();
    }//GEN-LAST:event_menuEditCutActionPerformed

    private void menuEditPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditPasteActionPerformed
        // TODO add your handling code here:
        txtDisplay.paste();
    }//GEN-LAST:event_menuEditPasteActionPerformed

    private void menuEditUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditUndoActionPerformed
        // TODO add your handling code here:
        if (undoManager.canUndo()) {
            undoManager.undo();
        }
    }//GEN-LAST:event_menuEditUndoActionPerformed

    private void menuEditRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditRedoActionPerformed
        // TODO add your handling code here:
        if (undoManager.canRedo()) {
            undoManager.redo();
        }
    }//GEN-LAST:event_menuEditRedoActionPerformed

    private void menuEditFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditFindActionPerformed
        // TODO add your handling code here:
        findDialog.setVisible(true);
        findDialog.pack();
        findDialog.setLocationRelativeTo(this);
    }//GEN-LAST:event_menuEditFindActionPerformed

    private void menuEditReplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditReplaceActionPerformed
        // TODO add your handling code here:
        replaceDialog.setVisible(true);
        replaceDialog.pack();
        replaceDialog.setLocationRelativeTo(this);
    }//GEN-LAST:event_menuEditReplaceActionPerformed

    private void menuEditChangeFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditChangeFontActionPerformed
        // TODO add your handling code here:
        changeFontDialog.setVisible(true);
        changeFontDialog.pack();
        changeFontDialog.setLocationRelativeTo(this);
    }//GEN-LAST:event_menuEditChangeFontActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        this.exitGui();
    }//GEN-LAST:event_formWindowClosing

    private void btnCancelFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelFindActionPerformed
        // TODO add your handling code here:
        pos = 0;
        txtfFind.setText("");
        findDialog.dispose();
    }//GEN-LAST:event_btnCancelFindActionPerformed

    //trong giai doan viet.
    private void btnFindDialogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindDialogActionPerformed
        // TODO add your handling code here:
        int index = textEditor.findNext(txtfFind.getText(), pos, chbMatchCase.isSelected());
        pos = index + txtfFind.getText().length();
        if (index == -1) {
            JOptionPane.showMessageDialog(this, "Can't find " + txtfFind.getText(), "My Text Editor", JOptionPane.INFORMATION_MESSAGE);
            pos = 0;
            index = 0;
        }
        txtDisplay.requestFocusInWindow();
        txtDisplay.setCaretPosition(index);
        txtDisplay.moveCaretPosition(pos);
        textEditor.setTextChanged(false);
    }//GEN-LAST:event_btnFindDialogActionPerformed

    private void fontListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_fontListValueChanged
        // TODO add your handling code here:
        //set text for font field
        fontList.ensureIndexIsVisible(fontList.getSelectedIndex());
        txtfFont.setText(fontList.getSelectedValue());
        //set text for font style field
        fontStyleList.ensureIndexIsVisible(fontStyleList.getSelectedIndex());
        txtfFontStyle.setText(fontStyleList.getSelectedValue());
        //set text for font size  field
        sizeList.ensureIndexIsVisible(sizeList.getSelectedIndex());
        txtfSize.setText(sizeList.getSelectedValue());
        lblPreview.setFont(new Font(fontList.getSelectedValue(), fontStyleList.getSelectedIndex(), Integer.parseInt(txtfSize.getText())));
    }//GEN-LAST:event_fontListValueChanged

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        // TODO add your handling code here:
        txtDisplay.setFont(new Font(fontList.getSelectedValue(), fontStyleList.getSelectedIndex(), Integer.parseInt(sizeList.getSelectedValue())));
        changeFontDialog.dispose();
    }//GEN-LAST:event_btnOKActionPerformed

    private void btnCancelCFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelCFontActionPerformed
        // TODO add your handling code here:
        sizeList.setSelectedValue("14", true);
        fontStyleList.setSelectedIndex(0);
        fontList.setSelectedValue("Consolas", true);
        changeFontDialog.dispose();
    }//GEN-LAST:event_btnCancelCFontActionPerformed

    private void btnFindNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindNextActionPerformed
        // TODO add your handling code here:
        int index = textEditor.findNext(txtfFindWhat.getText(), pos, chbMatchCase2.isSelected());
        pos = index + txtfFindWhat.getText().length();
        if (index == -1) {
            JOptionPane.showMessageDialog(this, "Can't find " + txtfFindWhat.getText(), "My Text Editor", JOptionPane.INFORMATION_MESSAGE);
            pos = 0;
            index = 0;
        }
        txtDisplay.requestFocusInWindow();
        txtDisplay.setCaretPosition(index);
        txtDisplay.moveCaretPosition(pos);
    }//GEN-LAST:event_btnFindNextActionPerformed

    private void replaceDialogWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_replaceDialogWindowClosing
        // TODO add your handling code here:
        pos = 0;
        txtfFindWhat.setText("");
        txtfReplaceWith.setText("");
        this.replaceDialog.dispose();
    }//GEN-LAST:event_replaceDialogWindowClosing

    private void findDialogWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_findDialogWindowClosing
        // TODO add your handling code here:
        pos = 0;
        txtfFind.setText("");
        findDialog.dispose();
    }//GEN-LAST:event_findDialogWindowClosing

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        txtfFindWhat.setText("");
        txtfReplaceWith.setText("");
        pos = 0;
        this.replaceDialog.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnReplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReplaceActionPerformed
        // TODO add your handling code here:
        if (!txtfFindWhat.getText().equals(txtDisplay.getSelectedText())) {
            this.btnFindNextActionPerformed(evt);
        }
        txtDisplay.setText(textEditor.replace(txtfReplaceWith.getText(), txtDisplay.getSelectionStart(), txtDisplay.getSelectionEnd()));
    }//GEN-LAST:event_btnReplaceActionPerformed

    private void btnReplaceAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReplaceAllActionPerformed
        // TODO add your handling code here:
        txtDisplay.setText(textEditor.replaceAll(txtfReplaceWith.getText(), txtfFindWhat.getText(), chbMatchCase2.isSelected()));

    }//GEN-LAST:event_btnReplaceAllActionPerformed

    private void chbMatchCaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chbMatchCaseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chbMatchCaseActionPerformed

    private void chbMatchCase2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chbMatchCase2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chbMatchCase2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MyTextEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MyTextEditor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnCancelCFont;
    private javax.swing.JButton btnCancelFind;
    private javax.swing.JButton btnFindDialog;
    private javax.swing.JButton btnFindNext;
    private javax.swing.JButton btnOK;
    private javax.swing.JButton btnReplace;
    private javax.swing.JButton btnReplaceAll;
    private javax.swing.JDialog changeFontDialog;
    private javax.swing.JCheckBox chbMatchCase;
    private javax.swing.JCheckBox chbMatchCase2;
    private javax.swing.JDialog findDialog;
    private javax.swing.JList<String> fontList;
    private javax.swing.JList<String> fontStyleList;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JLabel lblFindDialog;
    private javax.swing.JLabel lblFindWhat;
    private javax.swing.JLabel lblFont;
    private javax.swing.JLabel lblFontStyle;
    private javax.swing.JLabel lblPreview;
    private javax.swing.JLabel lblReplaceWith;
    private javax.swing.JLabel lblSize;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenuItem menuEditChangeFont;
    private javax.swing.JMenuItem menuEditCopy;
    private javax.swing.JMenuItem menuEditCut;
    private javax.swing.JMenuItem menuEditFind;
    private javax.swing.JMenuItem menuEditPaste;
    private javax.swing.JMenuItem menuEditRedo;
    private javax.swing.JMenuItem menuEditReplace;
    private javax.swing.JMenuItem menuEditSelectAll;
    private javax.swing.JMenuItem menuEditUndo;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuItem menuFileExit;
    private javax.swing.JMenuItem menuFileNew;
    private javax.swing.JMenuItem menuFileOpen;
    private javax.swing.JMenuItem menuFileSave;
    private javax.swing.JMenuItem menuFileSaveAs;
    private javax.swing.JPanel panelChangeFont;
    private javax.swing.JPanel panelFindDialog;
    private javax.swing.JPanel panelReplace;
    private javax.swing.JDialog replaceDialog;
    private javax.swing.JScrollPane scpFont;
    private javax.swing.JScrollPane scpFontStyle;
    private javax.swing.JScrollPane scpSize;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JList<String> sizeList;
    private static javax.swing.JTextArea txtDisplay;
    private javax.swing.JTextField txtfFind;
    private javax.swing.JTextField txtfFindWhat;
    private javax.swing.JTextField txtfFont;
    private javax.swing.JTextField txtfFontStyle;
    private javax.swing.JTextField txtfReplaceWith;
    private javax.swing.JTextField txtfSize;
    // End of variables declaration//GEN-END:variables
}
